-- [[ –º–µ–Ω—è–π —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ]]
getgenv().Optimization = {
    state = true, -- –≤–∫–ª/–≤—ã–∫–ª
    hide_screen = true, -- –≤—ã–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ä–∏—Å–æ–≤–∫—É –≥—Ä–∞—Ñ–∏–∫–∏, –±—É—Å—Ç–∏—Ç –∂–µ—Å—Ç–æ—á–∞–π—à–µ —Ñ–ø—Å (–≤–∫–ª/–≤—ã–∫–ª)
    fps = 3
};

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä—Ö–æ–ø–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
getgenv().ServerHopSettings = {
    interval = 120, -- 2 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    last_hop_time = os.time() - math.random(0, 60), -- —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    use_random_offset = true, -- –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ä–∞–Ω–¥–æ–º–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Ö–æ–ø–æ–º
    min_players = 2, -- –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    max_players = 14 -- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ (–∏–∑ 50)
};

if getgenv().Optimization.state then
    if setfpscap ~= nil then setfpscap(getgenv().Optimization.fps); end
    UserSettings().GameSettings.MasterVolume = 0;
    settings().Rendering.QualityLevel = "Level01";
    game:GetService("RunService"):Set3dRenderingEnabled(not getgenv().Optimization.hide_screen);
end

local players = game:GetService("Players");
local local_player = players.LocalPlayer;

-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è—é –æ–∂–∏–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ nil
local rifts
local function getRifts()
    local rendered = workspace:FindFirstChild("Rendered")
    if rendered then
        rifts = rendered:FindFirstChild("Rifts")
    end
    return rifts ~= nil
end

-- –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∏—Ñ—Ç—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
repeat
    task.wait(2) -- –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("Waiting for Rifts to load...")
until getRifts()

-- –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤
local cache_file = "rifts_cache.json"
local rifts_cache = {}

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
local function cleanCache()
    local current_time = os.time()
    local new_cache = {}
    local removed_count = 0
    
    for rift_id, timestamp in pairs(rifts_cache) do
        if current_time - timestamp < 540 then -- 9 –º–∏–Ω—É—Ç (540 —Å–µ–∫—É–Ω–¥)
            new_cache[rift_id] = timestamp
        else
            removed_count = removed_count + 1
        end
    end
    
    rifts_cache = new_cache
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à
    pcall(function()
        writefile(cache_file, game:GetService("HttpService"):JSONEncode(rifts_cache))
    end)
    
    print("Cache cleaned: Removed", removed_count, "items. Current cache size:", #rifts_cache)
end

-- –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if pcall(function() readfile(cache_file) end) then
    pcall(function()
        rifts_cache = game:GetService("HttpService"):JSONDecode(readfile(cache_file))
    end)
    cleanCache() -- –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 9 –º–∏–Ω—É—Ç
task.spawn(function()
    while true do
        task.wait(540) -- 9 –º–∏–Ω—É—Ç
        print("Scheduled cache cleanup...")
        cleanCache()
    end
end)

local whitelisted_eggs = { -- —Ç–µ–ø–µ—Ä—å —Ç—É—Ç –º–µ–Ω—è–µ—à—å –≤–µ–±—Ö—É–∫–∏ –ù–ê –ö–ê–ñ–î–û–ï –Ø–ô–¶–û/–°–£–ù–î–£–ö, –≤ luck —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ –∫–∞–≤—ã—á–∫–∞—Ö –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—à—å –º–Ω–æ–∂–∏—Ç–µ–ª—å —É–¥–∞—á–∏
    ["rainbow-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680016367161465/ytWtBI3H3EKVrjifey0KMsJ05wEtuy1cdMV7EvJ5OX6cb128k36s17sS8EYM7pCXkxkg",
        role_id = "", -- ID —Ä–æ–ª–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        luck = { "x25" },
        name = "Rainbow Egg"
    },
    ["nightmare-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369679913308655828/es2UQtG9m_FY_aYotNaVKpFNwDXj0IOakFJg3g8lQ107fAHPJWoUqvU_1_RLEpCGUmIJ",
        role_id = "",
        luck = { "x25" },
        name = "Nightmare Egg"
    },
    ["void-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680094322364446/vkkzcYcVY30Tb-D2MRZMrQbR3d2U_0YCdevjgPR2QTaEjFcFs8b7uZbEi-C5u60Bum6N",
        role_id = "",
        luck = { "x25" },
        name = "Void Egg"
    },
    ["royal-chest"] = {
        webhook = "https://discord.com/api/webhooks/1369320116969541702/217cjweQ3Aga1IwwBzClwuNpe2KoXRKOq2IJMCV9sgzlEpd9iYHH2UJ89IT4qq8smumE",
        role_id = "1371539682713796648",
        name = "Royal Chest"
    },
    ["bubble-rift"] = {
        webhook = "https://discord.com/api/webhooks/1369680404487077958/pNTDbV_qBHqzTKXrxagTlqMyFgc13qmtRha8ca1Fkn9AdlnFgjT977lDU9A8Tavw1Ju9",
        role_id = "",
        name = "Bubble Rifft"
    },
    ["mining-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680163113140354/KSzLYRiJMmYeeGOv4aSekxlVxrxihddZrvyJ_AfAtwDZsLCCYwXMvYq7HrEfP1N6tJjH",
        role_id = "",
        luck = { "x25" },
        name = "Mining Egg"
    },
    ["cyber-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680252145504256/OEFlHbKAzOuz6kZ97gcgsNyDrBR6wMBNlwiaIXWVNTeXUM5yIDLPGstTawfPE4Lx6a6R",
        role_id = "1371540351361482802",
        luck = { "x25" },
        name = "Cyber Egg"
    },
    ["dice-chest"] = {
        webhook = "https://discord.com/api/webhooks/1369680321729138718/s6R5cyeB3k9sBAD4Akxaem86xzxW4-6lNWgs-V5P2TDH86pxWl7mT1Wwvs-XfN4O-GVS",
        role_id = "1371539732022169601",
        name = "Dice Chest"
    },
    ["underworld-1"] = {
        webhook = "https://discord.com/api/webhooks/1371074619645235243/u_0v1rptBiojPUlQSSwaA7zoIbryx-4qEK1JZaaJkKd82T9Mo4VWMN3hyD6beszMNcYY",
        role_id = "1371510979116007545",
        luck = { "x25" },
        name = "Underworld 1"
    },
    ["underworld-2"] = {
        webhook = "https://discord.com/api/webhooks/1371074619645235243/u_0v1rptBiojPUlQSSwaA7zoIbryx-4qEK1JZaaJkKd82T9Mo4VWMN3hyD6beszMNcYY",
        role_id = "1371510979116007545",
        luck = { "x25" },
        name = "Underworld 2"
    },
    ["underworld-3"] = {
        webhook = "https://discord.com/api/webhooks/1371074619645235243/u_0v1rptBiojPUlQSSwaA7zoIbryx-4qEK1JZaaJkKd82T9Mo4VWMN3hyD6beszMNcYY",
        role_id = "1371510979116007545",
        luck = { "x25" },
        name = "Underworld 3"
    }
};
local spam_messages = {
    "Best Rift Finder = ƒ£ƒ£/ easyrift üî•",
    "Silly Egg is found! ƒ£ƒ£/ easyrift üî•",
    "Best Pet Shop = ƒ£ƒ£/ easyrift üî•",
    "REACH THE LEADERBOARDS USING ƒüƒü/ easyrift üèÜ",
    "SECRETS GIVE-AWAY HAPPENING ƒ£ƒ£/ easyrift üåü",
    "X25 LUCK RIFTS AT ƒ£ƒ£/ easyrift üçÄ",
    "GET SILLY EGG AT ƒ£ƒ£/ easyrift ü•ö",
    "UNDERWORLD RIFT ƒ£ƒ£/ easyrift ü•ö"
};

local join_link = string.format('https://www.roblox.com/games/start?placeId=16302670534&launchData=%d/%s', game.PlaceId, game.JobId);

local parse_time = function(text)
    text = string.lower(string.gsub(text, "^%s*(.-)%s*$", "%1"));
    local number, unit = string.match(text, "(%d+)%s*(%a+)");
    if number == nil or unit == nil then 
        return 0;
    end
    
    number = tonumber(number);
    
    if string.find(unit, "second") then
        return number;
    elseif string.find(unit, "minute") then
        return number * 60;
    elseif string.find(unit, "hour") then
        return number * 3600;
    else
        return 0;
    end
end

local time_to_discorddate = function(time_)
    return string.format("<t:%d:R>", time_);
end

local request = (syn ~= nil and syn.request) or (http ~= nil and http.request) or (fluxus ~= nil and fluxus.request) or http_request or request;
-- –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è notify –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–∏–Ω–≥–æ–≤
local notify = function(webhook, data)
    local response = request({
        Url = webhook, 
        Body = game:GetService("HttpService"):JSONEncode(data), 
        Method = "POST", 
        Headers = { ['content-type'] = "application/json" }
    });
    print("Discord webhook response:", response.StatusCode, response.StatusMessage);
    return response;
end

-- –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä-—Ö–æ–ø –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Å–µ—Ä–≤–µ—Ä—ã
local serverhop = function()
    -- –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    if getgenv().ServerHopSettings.use_random_offset then
        local random_delay = math.random(3, 15)
        print("Adding random delay before server hop:", random_delay, "seconds")
        wait(random_delay)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–µ—Ä–≤–µ—Ä—Ö–æ–ø–∞
    getgenv().ServerHopSettings.last_hop_time = os.time()
    print("Initiating server hop at:", os.date("%H:%M:%S", getgenv().ServerHopSettings.last_hop_time))

    local file = "serverhop_history.json";
    local history = {};
    local current_time = os.time();
    
    -- Load history if file exists
    if pcall(function() readfile(file) end) then
        history = game:GetService("HttpService"):JSONDecode(readfile(file))
        
        local new_history = {};
        for serverId, jt in pairs(history) do
            if current_time - jt < 540 then
                new_history[serverId] = jt;
            end
        end

        history = new_history;
    end
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –∂–µ—Ä–µ–±—å–µ–≤–∫—É –¥–ª—è –±–æ–ª–µ–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
    local page_size = 100
    local page_offset = math.random(0, 3) * page_size
    
    local req = request({
        Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=%d&cursor=%s&excludeFullGames=true", 
            game.PlaceId,
            page_size,
            page_offset > 0 and tostring(page_offset) or ""
        );
    })
    
    local success, body = pcall(function()
        return game:GetService("HttpService"):JSONDecode(req.Body);
    end)
    
    if success and body and body.data then
        local servers = {};
        
        for _, server in pairs(body.data) do
            if server.playing >= getgenv().ServerHopSettings.min_players and 
               server.playing <= getgenv().ServerHopSettings.max_players and
               server.id ~= game.JobId and 
               not history[server.id] then
                
                -- –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤ (–¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
                local priority = 50 - server.playing
                for i = 1, priority do
                    table.insert(servers, server);
                end
            end
        end
        
        if #servers > 0 then
            -- –í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏–∑ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            local selected_server = servers[math.random(1, #servers)];
            history[selected_server.id] = current_time;
            writefile(file, game:GetService("HttpService"):JSONEncode(history));
            
            print("Selected server with", selected_server.playing, "players")
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, selected_server.id, local_player);
        else
            print("No suitable servers found, trying public teleport")
            repeat
                game:GetService("TeleportService"):Teleport(game.PlaceId, local_player);
                task.wait(20);
            until game:FindFirstChild("NetworkClient") ~= nil;
        end
    else
        print("Error fetching servers, trying public teleport")
        repeat
            game:GetService("TeleportService"):Teleport(game.PlaceId, local_player);
            task.wait(20);
        until game:FindFirstChild("NetworkClient") ~= nil;
    end
end

task.spawn(function() -- anti afk (xz zachem, poidet)
    for _,v in pairs(getconnections(local_player.Idled)) do v:Disable() end
    for _,v in pairs(getconnections(game:GetService("UserInputService").WindowFocused)) do v:Disable() end
    for _,v in pairs(getconnections(game:GetService("UserInputService").WindowFocusReleased)) do v:Disable() end
end)

task.spawn(function()
    local channel = game:GetService("TextChatService"):WaitForChild("TextChannels"):WaitForChild("RBXGeneral");
    local time = 1;
    while task.wait() do
        channel:SendAsync(spam_messages[Random.new(tick()):NextInteger(1, #spam_messages)]);
        time += 2;
        if time > 6 then
            time = 1;
        end

        task.wait(time);
    end
end)

-- –°–µ—Ä–≤–µ—Ä—Ö–æ–ø –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
task.spawn(function()
    while true do
        task.wait(5) -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        local current_time = os.time()
        local elapsed_time = current_time - getgenv().ServerHopSettings.last_hop_time
        
        if elapsed_time >= getgenv().ServerHopSettings.interval then
            print("Server hop interval reached:", elapsed_time, "seconds")
            serverhop()
        end
    end
end)

do
    local rifts_found = 0 -- —Å—á–µ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∏—Ñ—Ç–æ–≤
    local rifts_sent = 0  -- —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤
    
    for _, rift in pairs(rifts:GetChildren()) do
        if not rift:IsA("Model") or not whitelisted_eggs[rift.Name] then
            continue;
        end
        
        rifts_found = rifts_found + 1
        
        local data = whitelisted_eggs[rift.Name];
        local luck = "None";
        local gui
        
        -- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ nil –∏ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        local display = rift:FindFirstChild("Display")
        if display then
            gui = display:FindFirstChildOfClass("SurfaceGui")
            if data.luck ~= nil then
                if gui == nil then
                    repeat 
                        task.wait(0.5)
                        gui = display:FindFirstChildOfClass("SurfaceGui")
                    until gui ~= nil or task.wait(5) -- —Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ GUI –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
                end
                
                if gui and gui:FindFirstChild("Icon") and gui.Icon:FindFirstChild("Luck") then
                    if not table.find(data.luck, gui.Icon.Luck.Text) then
                        continue
                    end
                    luck = gui.Icon.Luck.Text
                else
                    continue -- –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                end
            end
        else
            continue -- –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç Display
        end
        
        if not gui or not gui:FindFirstChild("Timer") then
            continue -- –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–π–º–µ—Ä–∞
        end

        -- –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–∏—Ñ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–∏–ø–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º)
        local position = rift:GetPivot().Position
        local rift_id = string.format("%s_%d_%d_%d", 
            rift.Name, 
            math.floor(position.X), 
            math.floor(position.Y), 
            math.floor(position.Z))
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç —Ä–∏—Ñ—Ç —É–∂–µ –Ω–∞–π–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
        if rifts_cache[rift_id] then
            print("Rift already reported:", rift_id)
            continue
        end
        
        local time = os.time() + parse_time(gui.Timer.Text);
        local discord_time = time_to_discorddate(time);
        local height = math.floor(rift:GetPivot().Position.Y) - 4;
        local message = {
            -- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–ª–∏ - –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            ['content'] = data.role_id and data.role_id ~= "" and ("<@&" .. data.role_id .. ">") or "",
            ['allowed_mentions'] = {
                ['parse'] = {"roles"}
            },
            ['embeds'] = {
                { 
                    ['title'] = string.format("**%s has been found!**", data.name), 
                    ['fields'] = {
                        {
                            ['name'] = "**‚è≤ Expires in**",
                            ['value'] = discord_time,
                            ['inline'] = true
                        },
                        {
                            ['name'] = "**üìè Height**",
                            ['value'] = string.format("`%d`", height),
                            ['inline'] = true
                        },
                        {
                            ['name'] = "**üë§ Players**",
                            ['value'] = string.format("`%d`", #players:GetPlayers()),
                            ['inline'] = true
                        },
                        {
                            ['name'] = "**üçÄ Luck**",
                            ['value'] = string.format("`%s`", luck)
                        },
                        {
                            ['name'] = "**üîó Join link**",
                            ['value'] = join_link
                        }
                    },
                    ['color'] = 4508791,
                    ['timestamp'] = DateTime.now():ToIsoDate()
                }
            }
        };

        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∏—Ñ—Ç –≤ –∫—ç—à–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        rifts_cache[rift_id] = os.time()
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à
        pcall(function()
            writefile(cache_file, game:GetService("HttpService"):JSONEncode(rifts_cache))
        end)
        
        notify(data.webhook, message);
        rifts_sent = rifts_sent + 1
        
        -- –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤–µ–±—Ö—É–∫–æ–≤
        task.wait(0.5)
    end
    
    print("Rifts found:", rifts_found, "Webhooks sent:", rifts_sent)
    
    -- –ù–µ –¥–µ–ª–∞–µ–º –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä—Ö–æ–ø –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–π–º–µ—Ä
end

game:GetService("CoreGui"):FindFirstChild("RobloxPromptGui"):FindFirstChild("promptOverlay").ChildAdded:Connect(function(child) -- –ø—Ä–∏ –∫–∏–∫–µ –∏–≥—Ä–æ–π
    serverhop();
end)
