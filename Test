local Player = game.Players.LocalPlayer    
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://www.roblox.com/games/126884695634066/Grow-a-Garden"

-- Marketing messages to send before server hopping
local messages = {
    "Best Grow A Garden pet & sheckles shop ģģ/ astral-market",
    "Sheckles shop ģģ/ astral-market",
    "Giveaways happening at ģģ/ astral-market",
    "Beat the game with ģģ/ astral-market"
}

local _place,_id = game.PlaceId, game.JobId
-- Asc for lowest player count, Desc for highest player count
local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=10"
function ListServers(cursor)
   local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
   return Http:JSONDecode(Raw)
end

-- Function to send a chat message
local function sendMessage(message)
    -- Try the new TextChatService first
    local success = pcall(function()
        local textChatService = game:GetService("TextChatService")
        local textChannel = textChatService:WaitForChild("TextChannels"):WaitForChild("RBXGeneral", 1)
        if textChannel then
            textChannel:SendAsync(message)
            print("Sent message with TextChatService: " .. message)
            return true
        end
        return false
    end)
    
    -- If the new chat system failed, try the old one
    if not success then
        pcall(function()
            local chatEvents = game:GetService("ReplicatedStorage"):FindFirstChild("DefaultChatSystemChatEvents")
            if chatEvents then
                local chatRemote = chatEvents:FindFirstChild("SayMessageRequest")
                if chatRemote then
                    chatRemote:FireServer(message, "All")
                    print("Sent message with legacy chat: " .. message)
                    return true
                end
            end
            return false
        end)
    end
end

-- Time between server hops (in seconds)
time_to_wait = 120

-- Main loop
while wait(1) do  -- Check frequently but only hop after the full time
    -- Send a random message from our list every 30 seconds
    for i = 1, 2 do -- Send 2 messages before hopping
        -- Choose a random message
        local randomMessage = messages[math.random(1, #messages)]
        sendMessage(randomMessage)
        
        -- Wait between messages
        wait(3)
    end
    
    -- Wait remaining time before hopping
    wait(time_to_wait - 6) -- Adjusted to account for the message sending time
    
    -- Freeze player to prevent crashes
    if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
        Player.Character.HumanoidRootPart.Anchored = true
    end
    
    -- Get a random server and teleport
    local success, result = pcall(function()
        local Servers = ListServers()
        if Servers and Servers.data and #Servers.data > 0 then
            local Server = Servers.data[math.random(1, #Servers.data)]
            if Server.id ~= game.JobId then -- Don't teleport to the same server
                TPS:TeleportToPlaceInstance(_place, Server.id, Player)
                return true
            end
        end
        return false
    end)
    
    -- If server hopping failed, try again after a short delay
    if not success or not result then
        print("Server hop failed, will try again.")
        wait(10)
    end
end
