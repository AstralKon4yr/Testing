-- [[ –º–µ–Ω—è–π —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ]]
getgenv().Optimization = {
	state = true, -- –≤–∫–ª/–≤—ã–∫–ª
	hide_screen = true, -- –≤—ã–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ä–∏—Å–æ–≤–∫—É –≥—Ä–∞—Ñ–∏–∫–∏, –±—É—Å—Ç–∏—Ç –∂–µ—Å—Ç–æ—á–∞–π—à–µ —Ñ–ø—Å (–≤–∫–ª/–≤—ã–∫–ª)
	fps = 5
};

if getgenv().Optimization.state then
	if setfpscap ~= nil then setfpscap(getgenv().Optimization.fps); end
    UserSettings().GameSettings.MasterVolume = 0;
    settings().Rendering.QualityLevel = "Level01";
    game:GetService("RunService"):Set3dRenderingEnabled(not getgenv().Optimization.hide_screen);
end

local players = game:GetService("Players");
local local_player = players.LocalPlayer;
local rifts = workspace:FindFirstChild("Rendered"):FindFirstChild("Rifts");
local whitelisted_eggs = { -- —Ç–µ–ø–µ—Ä—å —Ç—É—Ç –º–µ–Ω—è–µ—à—å –≤–µ–±—Ö—É–∫–∏ –ù–ê –ö–ê–ñ–î–û–ï –Ø–ô–¶–û/–°–£–ù–î–£–ö, –≤ luck —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ –∫–∞–≤—ã—á–∫–∞—Ö –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—à—å –º–Ω–æ–∂–∏—Ç–µ–ª—å —É–¥–∞—á–∏
    ["rainbow-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680016367161465/ytWtBI3H3EKVrjifey0KMsJ05wEtuy1cdMV7EvJ5OX6cb128k36s17sS8EYM7pCXkxkg",
		role_id = 0,
		luck = { "x25" },
		name = "Rainbow Egg"
    },
    ["nightmare-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369679913308655828/es2UQtG9m_FY_aYotNaVKpFNwDXj0IOakFJg3g8lQ107fAHPJWoUqvU_1_RLEpCGUmIJ",
		role_id = 0,
		luck = { "x25" },
		name = "Nightmare Egg"
    },
    ["void-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680094322364446/vkkzcYcVY30Tb-D2MRZMrQbR3d2U_0YCdevjgPR2QTaEjFcFs8b7uZbEi-C5u60Bum6N",
		role_id = 0,
		luck = { "x25" },
		name = "Void Egg"
    },
    ["royal-chest"] = {
        webhook = "https://discord.com/api/webhooks/1369320116969541702/217cjweQ3Aga1IwwBzClwuNpe2KoXRKOq2IJMCV9sgzlEpd9iYHH2UJ89IT4qq8smumE",
		role_id = 0,
		name = "Royal Chest"
    },
    ["bubble-rift"] = {
        webhook = "https://discord.com/api/webhooks/1369680404487077958/pNTDbV_qBHqzTKXrxagTlqMyFgc13qmtRha8ca1Fkn9AdlnFgjT977lDU9A8Tavw1Ju9",
		role_id = 0,
		name = "Bubble Rifft"
    },
    ["silly-egg"] = {
        webhook = "",
		role_id = 0,
		luck = { "x25" },
		name = "Silly Egg"
    },
    ["mining-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680163113140354/KSzLYRiJMmYeeGOv4aSekxlVxrxihddZrvyJ_AfAtwDZsLCCYwXMvYq7HrEfP1N6tJjH",
		role_id = 0,
		luck = { "x25" },
		name = "Mining Egg"
    },
    ["cyber-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680252145504256/OEFlHbKAzOuz6kZ97gcgsNyDrBR6wMBNlwiaIXWVNTeXUM5yIDLPGstTawfPE4Lx6a6R",
		role_id = 0,
		luck = { "x25" },
		name = "Cyber Egg"
    },
    ["game-egg"] = {
        webhook = "",
		role_id = 0,
		luck = { "x25" },
		name = "Game Egg"
    },
	["dice-chest"] = {
        webhook = "https://discord.com/api/webhooks/1369680321729138718/s6R5cyeB3k9sBAD4Akxaem86xzxW4-6lNWgs-V5P2TDH86pxWl7mT1Wwvs-XfN4O-GVS",
		role_id = 0,
		name = "Dice Chest"
    }
};
local spam_messages = {
	"Best Rift Finder = ƒ£ƒ£/ easyrift üî•",
	"Silly Egg is found! ƒ£ƒ£/ easyrift üî•",
	"Best Pet Shop = ƒ£ƒ£/ easyrift üî•",
	"REACH THE LEADERBOARDS USING ƒüƒü/ easyrift üèÜ",
	"SECRETS GIVE-AWAY HAPPENING ƒ£ƒ£/ easyrift üåü",
	"X25 LUCK RIFTS AT ƒ£ƒ£/ easyrift üçÄ",
	"GET SILLY EGG AT ƒ£ƒ£/ easyrift ü•ö"
};

local join_link = string.format('https://www.roblox.com/games/start?placeId=16302670534&launchData=%d/%s', game.PlaceId, game.JobId);

local parse_time = function(text)
	text = string.lower(string.gsub(text, "^%s*(.-)%s*$", "%1"));
    local number, unit = string.match(text, "(%d+)%s*(%a+)");
    if number == nil or unit == nil then 
		return 0;
	end
    
    number = tonumber(number);
    
    if string.find(unit, "second") then
        return number;
    elseif string.find(unit, "minute") then
        return number * 60;
    elseif string.find(unit, "hour") then
        return number * 3600;
    else
        return 0;
    end
end

local time_to_discorddate = function(time_)
	return string.format("<t:%d:R>", time_);
end

local request = (syn ~= nil and syn.request) or (http ~= nil and http.request) or (fluxus ~= nil and fluxus.request) or http_request or request;
local notify = function(webhook, data)
	return request({Url = webhook, Body = game:GetService("HttpService"):JSONEncode(data), Method = "POST", Headers = { ['content-type'] = "application/json" }});
end

local serverhop = function()
	wait(15);

    local file = "serverhop_history.json";
    local history = {};
    local current_time = os.time();
    
    -- Load history if file exists
    if pcall(function() readfile(file) end) then
        history = game:GetService("HttpService"):JSONDecode(readfile(file))
        
        local new_history = {};
        for serverId, jt in pairs(history) do
            if current_time - jt < 540 then
                new_history[serverId] = jt;
            end
        end

        history = new_history;
    end
    
    local req = request({
        Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", game.PlaceId);
    })
    
    local success, body = pcall(function()
        return game:GetService("HttpService"):JSONDecode(req.Body);
    end)
    
    if success and body and body.data then
        local servers = {};
        
        for _, server in pairs(body.data) do
            if server.playing < server.maxPlayers and server.id ~= game.JobId and not history[server.id] then
                table.insert(servers, server);
            end
        end
        
        if #servers > 0 then
            local selected_server = servers[math.random(1, #servers)];
            history[selected_server.id] = current_time;
            writefile(file, game:GetService("HttpService"):JSONEncode(history));
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, selected_server.id, local_player);
        else
            repeat
                game:GetService("TeleportService"):Teleport(game.PlaceId, local_player);
                task.wait(20);
            until game:FindFirstChild("NetworkClient") ~= nil;
        end
    else
        repeat
            game:GetService("TeleportService"):Teleport(game.PlaceId, local_player);
            task.wait(20);
        until game:FindFirstChild("NetworkClient") ~= nil;
    end
end

task.spawn(function() -- anti afk (xz zachem, poidet)
    for _,v in pairs(getconnections(local_player.Idled)) do v:Disable() end
    for _,v in pairs(getconnections(game:GetService("UserInputService").WindowFocused)) do v:Disable() end
    for _,v in pairs(getconnections(game:GetService("UserInputService").WindowFocusReleased)) do v:Disable() end
end)

task.spawn(function()
	local channel = game:GetService("TextChatService"):WaitForChild("TextChannels"):WaitForChild("RBXGeneral");
	local time = 1;
	while task.wait() do
		channel:SendAsync(spam_messages[Random.new(tick()):NextInteger(1, #spam_messages)]);
		time += 2;
		if time > 6 then
			time = 1;
		end

		task.wait(time);
	end
end)

do
	for _, rift in pairs(rifts:GetChildren()) do
		if not rift:IsA("Model") or not whitelisted_eggs[rift.Name] then
			continue;
		end

		local data = whitelisted_eggs[rift.Name];
		local luck = "None";
		local gui = rift:FindFirstChild("Display"):FindFirstChildOfClass("SurfaceGui");
		if data.luck ~= nil then
			if gui == nil then
				repeat task.wait(); gui = rift:FindFirstChild("Display"):FindFirstChildOfClass("SurfaceGui");
				until gui ~= nil;
			end
			
			if not table.find(data.luck, gui.Icon.Luck.Text) then
				continue;
			end

			luck = gui.Icon.Luck.Text;
		end

		local time = os.time() + parse_time(gui.Timer.Text);
		local discord_time = time_to_discorddate(time);
		local height = math.floor(rift:GetPivot().Position.Y) - 4;
		local message = {
			['content'] = string.format("<@%d>", data.role_id),
			['embeds'] = {
				{ 
					['title'] = string.format("**%s has been found!**", data.name), 
					['fields'] = {
						{
							['name'] = "**‚è≤ Expires in**",
							['value'] = discord_time,
							['inline'] = true
						},
						{
							['name'] = "**üìè Height**",
							['value'] = string.format("`%d`", height),
							['inline'] = true
						},
						{
							['name'] = "**üë§ Players**",
							['value'] = string.format("`%d`", #players:GetPlayers()),
							['inline'] = true
						},
						{
							['name'] = "**üçÄ Luck**",
							['value'] = string.format("`%s`", luck)
						},
						{
							['name'] = "**üîó Join link**",
							['value'] = join_link
						}
					},
					['color'] = 4508791,
					['timestamp'] = DateTime.now():ToIsoDate()
				}
			}
		};

		notify(data.webhook, message);
	end

	serverhop();
end

game:GetService("CoreGui"):FindFirstChild("RobloxPromptGui"):FindFirstChild("promptOverlay").ChildAdded:Connect(function(child) -- –ø—Ä–∏ –∫–∏–∫–µ –∏–≥—Ä–æ–π
    serverhop();
end)
