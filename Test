-- [[ меняй эти настройки для оптимизации ]]
getgenv().Optimization = {
    state = true, -- вкл/выкл
    hide_screen = true, -- выключает прорисовку графики, бустит жесточайше фпс (вкл/выкл)
    fps = 3
};

-- Настройка серверхопа
getgenv().ServerHopSettings = {
    interval = 15, -- 15 секунд
    last_hop_time = os.time() - 20, -- Сразу начинаем с необходимости хопа
    use_random_offset = true, -- использовать ли рандомную задержку перед хопом
    min_players = 2, -- минимальное количество игроков в сервере для перехода
    max_players = 10, -- максимальное количество игроков в сервере для перехода (из 50)
    force_hop = true, -- принудительный хоп, даже если обычная проверка не сработала
    debug_mode = true, -- включить режим отладки серверхопа
    retry_delay = 5, -- задержка перед повторной попыткой хопа в случае ошибки
};

-- Настройки глобального кеширования
getgenv().GlobalCacheSettings = {
    share_cache = true, -- использовать общий кеш для всех аккаунтов
    cache_directory = "globalriftcache", -- папка для общего кеша
    check_webhook_history = true, -- проверять историю вебхуков
    webhook_cooldown = 900, -- 15 минут в секундах (мин. интервал между повторными вебхуками для одного типа рифта)
};

if getgenv().Optimization.state then
    if setfpscap ~= nil then setfpscap(getgenv().Optimization.fps); end
    UserSettings().GameSettings.MasterVolume = 0;
    settings().Rendering.QualityLevel = "Level01";
    game:GetService("RunService"):Set3dRenderingEnabled(not getgenv().Optimization.hide_screen);
end

local players = game:GetService("Players");
local local_player = players.LocalPlayer;
local http_service = game:GetService("HttpService")
local teleport_service = game:GetService("TeleportService");

-- Отладочная функция для логирования
local function debug_log(...)
    if getgenv().ServerHopSettings.debug_mode then
        local args = {...}
        local message = "【Серверхоп】: "
        for i, arg in ipairs(args) do
            message = message .. tostring(arg) .. " "
        end
        print(message)
    end
end

-- Исправление: добавляю ожидание и проверки на nil
local rifts
local function getRifts()
    local rendered = workspace:FindFirstChild("Rendered")
    if rendered then
        rifts = rendered:FindFirstChild("Rifts")
    end
    return rifts ~= nil
end

-- Пробуем найти рифты с задержкой
repeat
    task.wait(2) -- Ожидание для загрузки необходимых компонентов
    print("Waiting for Rifts to load...")
until getRifts()

-- Создаем папку для глобального кэша если её нет
if getgenv().GlobalCacheSettings.share_cache then
    if not isfolder(getgenv().GlobalCacheSettings.cache_directory) then
        makefolder(getgenv().GlobalCacheSettings.cache_directory)
        print("Created global cache directory:", getgenv().GlobalCacheSettings.cache_directory)
    end
end

-- Улучшенная система кэширования с поддержкой глобального доступа
local function getGlobalCacheFilePath(rift_type)
    if getgenv().GlobalCacheSettings.share_cache then
        return getgenv().GlobalCacheSettings.cache_directory .. "/" .. rift_type .. "_cache.json"
    else
        return "rifts_cache_" .. rift_type .. ".json"
    end
end

-- Основной файл кэша для обратной совместимости
local cache_file = "rifts_cache.json"
local webhook_history_file = "webhook_history.json"
local rifts_cache = {}
local webhook_history = {}

-- Функция для безопасного чтения файла с повторными попытками
local function safeReadFile(filepath, max_attempts)
    max_attempts = max_attempts or 3
    local attempts = 0
    local content
    
    while attempts < max_attempts do
        attempts = attempts + 1
        local success, result = pcall(function() 
            return readfile(filepath) 
        end)
        
        if success then
            content = result
            break
        else
            if attempts < max_attempts then
                task.wait(0.2) -- Ждем небольшой интервал перед повторной попыткой
            end
        end
    end
    
    return content
end

-- Функция для безопасной записи файла с повторными попытками
local function safeWriteFile(filepath, content, max_attempts)
    max_attempts = max_attempts or 3
    local attempts = 0
    
    while attempts < max_attempts do
        attempts = attempts + 1
        local success = pcall(function() 
            writefile(filepath, content) 
        end)
        
        if success then
            return true
        else
            if attempts < max_attempts then
                task.wait(0.2) -- Ждем небольшой интервал перед повторной попыткой
            end
        end
    end
    
    return false
end

-- Улучшенная функция для проверки, был ли рифт уже обработан
local function isRiftCached(rift_name, position, luck_value)
    -- Создаем более надежный ID, учитывающий больше параметров
    local precise_position = {
        x = math.floor(position.X * 10) / 10, -- С точностью до 0.1
        y = math.floor(position.Y * 10) / 10,
        z = math.floor(position.Z * 10) / 10
    }
    
    local rift_id = string.format("%s_%d_%d_%d_%s", 
        rift_name,
        math.floor(precise_position.x), 
        math.floor(precise_position.y), 
        math.floor(precise_position.z),
        luck_value or "noluck"
    )
    
    -- Проверяем локальный кэш
    if rifts_cache[rift_id] then
        return true, rift_id
    end
    
    -- Проверяем глобальный кэш для этого типа рифта
    if getgenv().GlobalCacheSettings.share_cache then
        local global_cache_path = getGlobalCacheFilePath(rift_name)
        
        if isfile(global_cache_path) then
            local content = safeReadFile(global_cache_path)
            
            if content then
                local global_cache = http_service:JSONDecode(content)
                if global_cache[rift_id] then
                    return true, rift_id
                end
            end
        end
    end
    
    -- Проверяем историю вебхуков для этого типа рифта
    if getgenv().GlobalCacheSettings.check_webhook_history then
        local current_time = os.time()
        
        if webhook_history[rift_name] and 
           current_time - webhook_history[rift_name] < getgenv().GlobalCacheSettings.webhook_cooldown then
            print("Webhook cooldown active for", rift_name, "- last webhook was", 
                  current_time - webhook_history[rift_name], "seconds ago")
            return true, rift_id
        end
    end
    
    return false, rift_id
end

-- Функция для сохранения рифта в кэше
local function cacheRift(rift_id, rift_name)
    local current_time = os.time()
    
    -- Сохраняем в локальный кэш
    rifts_cache[rift_id] = current_time
    
    -- Сохраняем в глобальный кэш для этого типа рифта
    if getgenv().GlobalCacheSettings.share_cache then
        local global_cache_path = getGlobalCacheFilePath(rift_name)
        local global_cache = {}
        
        -- Пытаемся загрузить существующий кэш
        if isfile(global_cache_path) then
            local content = safeReadFile(global_cache_path)
            if content then
                pcall(function()
                    global_cache = http_service:JSONDecode(content)
                end)
            end
        end
        
        -- Обновляем кэш
        global_cache[rift_id] = current_time
        
        -- Очищаем устаревшие записи
        local new_cache = {}
        for id, timestamp in pairs(global_cache) do
            if current_time - timestamp < 900 then -- 15 минут
                new_cache[id] = timestamp
            end
        end
        
        -- Сохраняем обновленный кэш
        safeWriteFile(global_cache_path, http_service:JSONEncode(new_cache))
    end
    
    -- Сохраняем в истории вебхуков
    if getgenv().GlobalCacheSettings.check_webhook_history then
        webhook_history[rift_name] = current_time
        
        -- Сохраняем историю вебхуков
        safeWriteFile(webhook_history_file, http_service:JSONEncode(webhook_history))
    end
    
    -- Для обратной совместимости сохраняем в основной кэш
    pcall(function()
        safeWriteFile(cache_file, http_service:JSONEncode(rifts_cache))
    end)
end

-- Функция для очистки кэша
local function cleanCache()
    local current_time = os.time()
    local new_cache = {}
    local removed_count = 0
    
    for rift_id, timestamp in pairs(rifts_cache) do
        if current_time - timestamp < 900 then -- 15 минут
            new_cache[rift_id] = timestamp
        else
            removed_count = removed_count + 1
        end
    end
    
    rifts_cache = new_cache
    
    -- Сохраняем обновленный кэш
    pcall(function()
        safeWriteFile(cache_file, http_service:JSONEncode(rifts_cache))
    end)
    
    -- Также очищаем глобальные кэши
    if getgenv().GlobalCacheSettings.share_cache then
        if isfolder(getgenv().GlobalCacheSettings.cache_directory) then
            local files = listfiles(getgenv().GlobalCacheSettings.cache_directory)
            for _, file_path in ipairs(files) do
                -- Только если это JSON-файл кэша
                if string.match(file_path, "cache%.json$") then
                    local content = safeReadFile(file_path)
                    if content then
                        local global_cache = http_service:JSONDecode(content)
                        local new_global_cache = {}
                        
                        for id, timestamp in pairs(global_cache) do
                            if current_time - timestamp < 900 then -- 15 минут
                                new_global_cache[id] = timestamp
                            end
                        end
                        
                        safeWriteFile(file_path, http_service:JSONEncode(new_global_cache))
                    end
                end
            end
        end
    end
    
    local cache_size = 0
    for _ in pairs(new_cache) do cache_size = cache_size + 1 end
    print("Cache cleaned: Removed", removed_count, "items. Current cache size:", cache_size)
end

-- Загружаем кэш, если он существует
if pcall(function() readfile(cache_file) end) then
    pcall(function()
        rifts_cache = http_service:JSONDecode(readfile(cache_file))
    end)
    cleanCache() -- Очищаем кэш при загрузке
end

-- Загружаем историю вебхуков, если она существует
if pcall(function() readfile(webhook_history_file) end) then
    pcall(function()
        webhook_history = http_service:JSONDecode(readfile(webhook_history_file))
    end)
end

-- Запускаем автоматическую очистку кэша каждые 5 минут
task.spawn(function()
    while true do
        task.wait(300) -- 5 минут
        print("Scheduled cache cleanup...")
        cleanCache()
    end
end)

local whitelisted_eggs = { -- теперь тут меняешь вебхуки НА КАЖДОЕ ЯЙЦО/СУНДУК, в luck через запятую в кавычках прописываешь множитель удачи
    ["rainbow-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680016367161465/ytWtBI3H3EKVrjifey0KMsJ05wEtuy1cdMV7EvJ5OX6cb128k36s17sS8EYM7pCXkxkg",
        role_id = "", -- ID роли как строка
        luck = { "x25" },
        name = "Rainbow Egg"
    },
    ["nightmare-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369679913308655828/es2UQtG9m_FY_aYotNaVKpFNwDXj0IOakFJg3g8lQ107fAHPJWoUqvU_1_RLEpCGUmIJ",
        role_id = "",
        luck = { "x25" },
        name = "Nightmare Egg"
    },
    ["void-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680094322364446/vkkzcYcVY30Tb-D2MRZMrQbR3d2U_0YCdevjgPR2QTaEjFcFs8b7uZbEi-C5u60Bum6N",
        role_id = "",
        luck = { "x25" },
        name = "Void Egg"
    },
    ["royal-chest"] = {
        webhook = "https://discord.com/api/webhooks/1369320116969541702/217cjweQ3Aga1IwwBzClwuNpe2KoXRKOq2IJMCV9sgzlEpd9iYHH2UJ89IT4qq8smumE",
        role_id = "1371539682713796648",
        name = "Royal Chest"
    },
    ["bubble-rift"] = {
        webhook = "https://discord.com/api/webhooks/1369680404487077958/pNTDbV_qBHqzTKXrxagTlqMyFgc13qmtRha8ca1Fkn9AdlnFgjT977lDU9A8Tavw1Ju9",
        role_id = "",
        name = "Bubble Rifft"
    },
    ["mining-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680163113140354/KSzLYRiJMmYeeGOv4aSekxlVxrxihddZrvyJ_AfAtwDZsLCCYwXMvYq7HrEfP1N6tJjH",
        role_id = "",
        luck = { "x25" },
        name = "Mining Egg"
    },
    ["cyber-egg"] = {
        webhook = "https://discord.com/api/webhooks/1369680252145504256/OEFlHbKAzOuz6kZ97gcgsNyDrBR6wMBNlwiaIXWVNTeXUM5yIDLPGstTawfPE4Lx6a6R",
        role_id = "1371540351361482802",
        luck = { "x25" },
        name = "Cyber Egg"
    },
    ["dice-chest"] = {
        webhook = "https://discord.com/api/webhooks/1369680321729138718/s6R5cyeB3k9sBAD4Akxaem86xzxW4-6lNWgs-V5P2TDH86pxWl7mT1Wwvs-XfN4O-GVS",
        role_id = "1371539732022169601",
        name = "Dice Chest"
    },
    ["underworld-1"] = {
        webhook = "https://discord.com/api/webhooks/1371074619645235243/u_0v1rptBiojPUlQSSwaA7zoIbryx-4qEK1JZaaJkKd82T9Mo4VWMN3hyD6beszMNcYY",
        role_id = "1371510979116007545",
        luck = { "x25" },
        name = "Underworld 1"
    },
    ["underworld-2"] = {
        webhook = "https://discord.com/api/webhooks/1371074619645235243/u_0v1rptBiojPUlQSSwaA7zoIbryx-4qEK1JZaaJkKd82T9Mo4VWMN3hyD6beszMNcYY",
        role_id = "1371510979116007545",
        luck = { "x25" },
        name = "Underworld 2"
    },
    ["underworld-3"] = {
        webhook = "https://discord.com/api/webhooks/1371074619645235243/u_0v1rptBiojPUlQSSwaA7zoIbryx-4qEK1JZaaJkKd82T9Mo4VWMN3hyD6beszMNcYY",
        role_id = "1371510979116007545",
        luck = { "x25" },
        name = "Underworld 3"
    }
};
local spam_messages = {
    "Best Rift Finder = ģģ/ easyrift 🔥",
    "Silly Egg is found! ģģ/ easyrift 🔥",
    "Best Pet Shop = ģģ/ easyrift 🔥",
    "REACH THE LEADERBOARDS USING ğğ/ easyrift 🏆",
    "SECRETS GIVE-AWAY HAPPENING ģģ/ easyrift 🌟",
    "X25 LUCK RIFTS AT ģģ/ easyrift 🍀",
    "GET SILLY EGG AT ģģ/ easyrift 🥚",
    "UNDERWORLD RIFT ģģ/ easyrift 🥚"
};

local join_link = string.format('https://www.roblox.com/games/start?placeId=16302670534&launchData=%d/%s', game.PlaceId, game.JobId);

local parse_time = function(text)
    text = string.lower(string.gsub(text, "^%s*(.-)%s*$", "%1"));
    local number, unit = string.match(text, "(%d+)%s*(%a+)");
    if number == nil or unit == nil then 
        return 0;
    end
    
    number = tonumber(number);
    
    if string.find(unit, "second") then
        return number;
    elseif string.find(unit, "minute") then
        return number * 60;
    elseif string.find(unit, "hour") then
        return number * 3600;
    else
        return 0;
    end
end

local time_to_discorddate = function(time_)
    return string.format("<t:%d:R>", time_);
end

local request = (syn ~= nil and syn.request) or (http ~= nil and http.request) or (fluxus ~= nil and fluxus.request) or http_request or request;
-- Улучшенная функция notify для отладки пингов
local notify = function(webhook, data, rift_name)
    local response = request({
        Url = webhook, 
        Body = http_service:JSONEncode(data), 
        Method = "POST", 
        Headers = { ['content-type'] = "application/json" }
    });
    print("Discord webhook sent for", rift_name, "- Response:", response.StatusCode, response.StatusMessage);
    return response;
end

-- Переменные для отслеживания статуса серверхопа
local is_server_hopping = false
local last_hop_attempt = 0
local server_hop_failures = 0

-- Улучшенная функция выбора сервера
local function findNewServer()
    debug_log("Поиск нового сервера...")
    local file = "serverhop_history.json";
    local history = {};
    local current_time = os.time();
    
    -- Генерируем уникальный seed для рандомизации на основе имени игрока и времени
    local player_seed = 0
    for i = 1, #local_player.Name do
        player_seed = player_seed + string.byte(local_player.Name, i)
    end
    math.randomseed(player_seed + os.time() % 1000)
    
    -- Load history if file exists
    if pcall(function() readfile(file) end) then
        local success, result = pcall(function() return http_service:JSONDecode(readfile(file)) end)
        if success and result then
            history = result
            
            local new_history = {};
            for serverId, jt in pairs(history) do
                if current_time - jt < 540 then
                    new_history[serverId] = jt;
                end
            end

            history = new_history;
        else
            debug_log("Ошибка при чтении истории серверов:", result)
        end
    end
    
    -- Добавляем жеребьевку для более случайного распределения серверов
    local page_size = 100
    local page_offset = math.random(0, 5) * page_size
    local sort_order = (math.random(1, 2) == 1) and "Asc" or "Desc"
    
    debug_log("Запрашиваем список серверов...")
    local req = request({
        Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=%s&limit=%d&cursor=%s&excludeFullGames=true", 
            game.PlaceId,
            sort_order,
            page_size,
            page_offset > 0 and tostring(page_offset) or ""
        );
    })
    
    local success, body = pcall(function()
        return http_service:JSONDecode(req.Body);
    end)
    
    if success and body and body.data then
        debug_log("Получен список из", #body.data, "серверов")
        local servers = {};
        local suitable_servers = 0
        
        for _, server in pairs(body.data) do
            if server.playing >= getgenv().ServerHopSettings.min_players and 
               server.playing <= getgenv().ServerHopSettings.max_players and
               server.id ~= game.JobId and 
               not history[server.id] then
                
                suitable_servers = suitable_servers + 1
                -- Используем разные стратегии для разных аккаунтов на основе их seed
                local priority
                if player_seed % 3 == 0 then
                    -- Предпочитаем серверы с меньшим числом игроков
                    priority = 50 - server.playing
                elseif player_seed % 3 == 1 then 
                    -- Предпочитаем серверы с большим числом игроков
                    priority = math.min(server.playing, 30)
                else
                    -- Равномерное распределение
                    priority = math.random(10, 20)
                end
                
                for i = 1, priority do
                    table.insert(servers, server);
                end
            end
        end
        
        debug_log("Найдено подходящих серверов:", suitable_servers)
        
        -- Перемешиваем серверы для лучшей рандомизации
        for i = #servers, 2, -1 do
            local j = math.random(1, i)
            servers[i], servers[j] = servers[j], servers[i]
        end
        
        if #servers > 0 then
            local selected_server = servers[math.random(1, #servers)];
            history[selected_server.id] = current_time;
            writefile(file, http_service:JSONEncode(history));
            
            debug_log("Выбран сервер с", selected_server.playing, "игроками, ID:", selected_server.id)
            return selected_server
        else
            debug_log("Нет подходящих серверов")
            return nil
        end
    else
        debug_log("Ошибка при запросе списка серверов")
        return nil
    end
end

-- Улучшенный сервер-хоп для предотвращения попадания на одни и те же серверы
local function serverhop()
    -- Проверяем, не выполняется ли уже серверхоп
    if is_server_hopping then
        debug_log("Серверхоп уже выполняется, пропускаем...")
        return false
    end
    
    -- Проверяем, не слишком ли часто пытаемся делать серверхоп
    local current_time = os.time()
    if current_time - last_hop_attempt < 3 then
        debug_log("Слишком частые попытки серверхопа, пропускаем...")
        return false
    end
    
    -- Отмечаем, что серверхоп начался
    is_server_hopping = true
    last_hop_attempt = current_time
    debug_log("Начинаем серверхоп")
    
    -- Добавляем случайную задержку для рассинхронизации аккаунтов (уменьшена для более быстрого серверхопа)
    if getgenv().ServerHopSettings.use_random_offset then
        local random_delay = math.random(1, 3) -- Уменьшено до 1-3 секунд
        debug_log("Добавляем случайную задержку:", random_delay, "секунд")
        wait(random_delay)
    end
    
    -- Обновляем время последнего серверхопа
    getgenv().ServerHopSettings.last_hop_time = current_time
    debug_log("Серверхоп инициирован в:", os.date("%H:%M:%S", current_time))

    -- Находим подходящий сервер
    local selected_server = findNewServer()
    
    -- Пробуем телепортироваться
    if selected_server then
        debug_log("Выполняем телепортацию...")
        
        local success = pcall(function()
            teleport_service:TeleportToPlaceInstance(game.PlaceId, selected_server.id, local_player)
        end)
        
        if success then
            debug_log("Команда телепортации отправлена успешно")
            -- Даем 10 секунд на телепортацию
            task.delay(10, function()
                debug_log("Проверяем, состоялась ли телепортация...")
                if local_player and local_player.Parent then
                    debug_log("Телепортация не удалась или заняла слишком много времени, сбрасываем флаг серверхопа")
                    is_server_hopping = false
                    server_hop_failures = server_hop_failures + 1
                    
                    -- Если было много неудачных попыток, пробуем альтернативный метод
                    if server_hop_failures >= 3 then
                        debug_log("Слишком много неудачных попыток, пробуем альтернативный метод")
                        teleport_service:Teleport(game.PlaceId, local_player)
                    end
                end
            end)
            return true
        else
            debug_log("Ошибка при отправке команды телепортации")
            is_server_hopping = false
            server_hop_failures = server_hop_failures + 1
            return false
        end
    else
        debug_log("Не удалось найти подходящий сервер, пробуем общую телепортацию")
        
        local success = pcall(function()
            teleport_service:Teleport(game.PlaceId, local_player)
        end)
        
        if success then
            debug_log("Общая телепортация инициирована")
            -- Аналогично даем 10 секунд
            task.delay(10, function()
                if local_player and local_player.Parent then
                    is_server_hopping = false
                end
            end)
            return true
        else
            debug_log("Ошибка при выполнении общей телепортации")
            is_server_hopping = false
            return false
        end
    end
end

-- Функция безопасного серверхопа с повторными попытками
local function safeServerhop()
    local success = serverhop()
    
    if not success and getgenv().ServerHopSettings.retry_delay > 0 then
        debug_log("Серверхоп не удался, пробуем снова через", getgenv().ServerHopSettings.retry_delay, "секунд")
        task.delay(getgenv().ServerHopSettings.retry_delay, function()
            serverhop()
        end)
    end
end

task.spawn(function() -- anti afk
    for _,v in pairs(getconnections(local_player.Idled)) do v:Disable() end
    for _,v in pairs(getconnections(game:GetService("UserInputService").WindowFocused)) do v:Disable() end
    for _,v in pairs(getconnections(game:GetService("UserInputService").WindowFocusReleased)) do v:Disable() end
end)

task.spawn(function()
    local channel = game:GetService("TextChatService"):WaitForChild("TextChannels"):WaitForChild("RBXGeneral");
    local time = 1;
    while task.wait() do
        channel:SendAsync(spam_messages[Random.new(tick()):NextInteger(1, #spam_messages)]);
        time += 2;
        if time > 6 then
            time = 1;
        end

        task.wait(time);
    end
end)

-- Серверхоп с таймером (основной механизм)
task.spawn(function()
    debug_log("Запуск таймера серверхопа")
    -- Добавляем небольшую начальную задержку
    task.wait(3)
    
    while true do
        task.wait(1) -- Проверяем каждую секунду для более точного срабатывания
        
        -- Пропускаем проверки, если уже идет процесс серверхопа
        if is_server_hopping then
            debug_log("Серверхоп уже выполняется, таймер пропускает итерацию")
            continue
        end
        
        local current_time = os.time()
        local elapsed_time = current_time - getgenv().ServerHopSettings.last_hop_time
        
        debug_log("Проверка таймера серверхопа - прошло", elapsed_time, "сек. из", getgenv().ServerHopSettings.interval)
        
        if elapsed_time >= getgenv().ServerHopSettings.interval then
            debug_log("Время серверхопа наступило! Прошло", elapsed_time, "секунд")
            safeServerhop()
        end
    end
end)

-- Принудительный серверхоп каждые 30 секунд, если основной механизм не сработал
if getgenv().ServerHopSettings.force_hop then
    task.spawn(function()
        debug_log("Запуск принудительного таймера серверхопа")
        -- Запускаем с некоторой задержкой после основного таймера
        task.wait(30)
        
        while true do
            -- Долгая пауза, так как это резервный механизм
            task.wait(30)
            
            -- Если хоп не выполнялся долгое время, делаем его принудительно
            local current_time = os.time()
            local elapsed_time = current_time - getgenv().ServerHopSettings.last_hop_time
            
            debug_log("Проверка принудительного серверхопа - прошло", elapsed_time, "сек.")
            
            if elapsed_time >= 45 then -- Если прошло более 45 секунд без хопа
                debug_log("ПРИНУДИТЕЛЬНЫЙ СЕРВЕРХОП! Прошло", elapsed_time, "секунд без хопа")
                safeServerhop()
            end
        end
    end)
end

do
    local rifts_found = 0 -- счетчик найденных рифтов
    local rifts_sent = 0  -- счетчик отправленных вебхуков
    
    for _, rift in pairs(rifts:GetChildren()) do
        if not rift:IsA("Model") or not whitelisted_eggs[rift.Name] then
            continue;
        end
        
        rifts_found = rifts_found + 1
        
        local data = whitelisted_eggs[rift.Name];
        local luck = "None";
        local gui
        
        -- Исправление: добавление проверок на nil и ожидания загрузки
        local display = rift:FindFirstChild("Display")
        if display then
            gui = display:FindFirstChildOfClass("SurfaceGui")
            if data.luck ~= nil then
                if gui == nil then
                    repeat 
                        task.wait(0.5)
                        gui = display:FindFirstChildOfClass("SurfaceGui")
                    until gui ~= nil or task.wait(5) -- таймаут 5 секунд на случай, если GUI не загрузится
                end
                
                if gui and gui:FindFirstChild("Icon") and gui.Icon:FindFirstChild("Luck") then
                    if not table.find(data.luck, gui.Icon.Luck.Text) then
                        continue
                    end
                    luck = gui.Icon.Luck.Text
                else
                    continue -- Пропускаем если нет нужных компонентов
                end
            end
        else
            continue -- Пропускаем если нет Display
        end
        
        if not gui or not gui:FindFirstChild("Timer") then
            continue -- Пропускаем если нет таймера
        end

        -- Позиция рифта
        local position = rift:GetPivot().Position
        
        -- Проверяем, был ли этот рифт уже найден и отправлен ранее
        local is_cached, rift_id = isRiftCached(rift.Name, position, luck)
        if is_cached then
            print("Rift already reported:", rift_id)
            continue
        end
        
        local time = os.time() + parse_time(gui.Timer.Text);
        local discord_time = time_to_discorddate(time);
        local height = math.floor(position.Y) - 4;
        local message = {
            -- Исправление формата упоминания роли - прямое использование без форматирования
            ['content'] = data.role_id and data.role_id ~= "" and ("<@&" .. data.role_id .. ">") or "",
            ['allowed_mentions'] = {
                ['parse'] = {"roles"}
            },
            ['embeds'] = {
                { 
                    ['title'] = string.format("**%s has been found!**", data.name), 
                    ['fields'] = {
                        {
                            ['name'] = "**⏲ Expires in**",
                            ['value'] = discord_time,
                            ['inline'] = true
                        },
                        {
                            ['name'] = "**📏 Height**",
                            ['value'] = string.format("`%d`", height),
                            ['inline'] = true
                        },
                        {
                            ['name'] = "**👤 Players**",
                            ['value'] = string.format("`%d`", #players:GetPlayers()),
                            ['inline'] = true
                        },
                        {
                            ['name'] = "**🍀 Luck**",
                            ['value'] = string.format("`%s`", luck)
                        },
                        {
                            ['name'] = "**🔗 Join link**",
                            ['value'] = join_link
                        }
                    },
                    ['color'] = 4508791,
                    ['timestamp'] = DateTime.now():ToIsoDate()
                }
            }
        };

        -- Сохраняем рифт в глобальном кэше
        cacheRift(rift_id, rift.Name)
        
        -- Отправляем вебхук с добавлением имени рифта для отладки
        notify(data.webhook, message, rift.Name);
        rifts_sent = rifts_sent + 1
        
        -- Добавляем небольшую задержку между отправками вебхуков
        task.wait(0.5)
    end
    
    print("Rifts found:", rifts_found, "Webhooks sent:", rifts_sent)
end

-- Обработка кика от игры
game:GetService("CoreGui"):FindFirstChild("RobloxPromptGui"):FindFirstChild("promptOverlay").ChildAdded:Connect(function(child)
    debug_log("Обнаружено сообщение от игры (возможно кик), инициируем серверхоп")
    safeServerhop()
end)

-- Запуск немедленного хопа, если не были найдены интересующие нас рифты
if not is_server_hopping then
    task.delay(5, function()
        debug_log("Запуск начального серверхопа через 5 секунд")
        safeServerhop()
    end)
end

debug_log("Скрипт полностью загружен и запущен")
